package com.socrata.soda2.http

import scala.io.Codec

import com.socrata.future.ExecutionContext
import com.socrata.http.{BodyConsumer, HeadersConsumer, StatusConsumer, Status}

import impl.{OKHeadersConsumer, AcceptedHeadersConsumer, ErrorHeadersConsumer}

/** A functoin that produces a state machine that understands the HTTP envelope of a SODA2
 * request.  This handles converting errors into exceptions and manages the details of
 * retrying long-running requests.
 *
 * @param bodyConsumer The bodyConsumer to be used in the event that the request succeeds at the HTTP level.
 * @param defaultRetryAfter The timeout in seconds to use if a 202 response is received with no suggested timeout value.
 * @param execContext A strategy for launching worker asynchronous worker threads.
 */
class StandardConsumer[T](bodyConsumer: Codec => BodyConsumer[T], defaultRetryAfter: Int = 60)(implicit execContext: ExecutionContext) extends StatusConsumer[Retryable[T]] {
  def apply(status: Status): Either[HeadersConsumer[Retryable[T]], Retryable[T]] = {
    if(status.isSuccess) success(status)
    else if(status.isRedirect) redirect(status)
    else if(status.isClientError) clientError(status)
    else if(status.isServerError) serverError(status)
    else // throw something
      error("NYI")
  }

  private def success(status: Status): Either[HeadersConsumer[Retryable[T]], Retryable[T]] = {
    // 200: normal, just proceed with upload
    // 202: 202 handling
    // 203: same as 200
    // 204: almost the same as 200 but after header-processing call the bodyConsumer with an empty array and isLast=true
    // 205: same as 204
    // 206: will not be generated by SODA2
    status.code match {
      case 200 => Left(new OKHeadersConsumer(bodyConsumer))
      case 202 => Left(new AcceptedHeadersConsumer(defaultRetryAfter))
    }
  }

  private def redirect(status: Status) = {
    // 300: will not be generated by SODA2
    // 301, 302, 307: if this was a GET, redirect.  Otherwise fail with "unexepected redirect".
    // 303: redirect
    // 304: we will never send a conditional GET and therefore this will never be sent back
    // 305, 306: we will never receive this from a SODA2 server
    error("NYI")
  }

  private def clientError(status: Status) = {
    Left(ErrorHeadersConsumer)
  }

  private def serverError(status: Status) = {
    Left(ErrorHeadersConsumer)
  }
}
